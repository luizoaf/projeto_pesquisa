(1.6 + 2.36)/2
(0.54 -2.42)/2
if(require(PerformanceAnalytics) == FALSE){
install.packages("PerformanceAnalytics")
}
?VaR
z_1 = qnorm(.01)
z_1
z_5= qnorm(.05)
z_10 = qnorm(.1)
z_5
z_10
setwd("C:/Users/V1d4 L0k4/Desktop/Projetos SourceTree/4 - calculo coeficiente B e volatilidade por setor em cada semestre")
source("../1_funcoes.R")
dados = read.csv(file="papeis_da_ibovespa_2008_a_2014_com_95_IBOVESPA.csv")
names(dados)
# eliminação da ibovespa
dados = dados[,-2]
#Datas precisam estar da mais recente para a mais antiga
dados = inverte_indices_data_frame(dados)
#eliminação da data
dados = dados[,-1]
series_temporais_setores = calcula_series_temporais_dos_setores(dados)
# serie_temporal_normalizada = c()
# serie_temporal = c()
# coluna = 1
# for(i in 1:(nrow(series_temporais_setores)-1)) {
#   serie_temporal_normalizada[i] = serie_temporal
# }
# par(mfrow=c(3,3))
# plot(main = names(series_temporais_setores)[1],series_temporais_setores[,1],ylab="valor")
# plot(main = names(series_temporais_setores)[2],series_temporais_setores[,2],ylab="valor")
# plot(main = names(series_temporais_setores)[3],series_temporais_setores[,3],ylab="valor")
# plot(main = names(series_temporais_setores)[4],series_temporais_setores[,4],ylab="valor")
# plot(main = names(series_temporais_setores)[5],series_temporais_setores[,5],ylab="valor")
# plot(main = names(series_temporais_setores)[6],series_temporais_setores[,6],ylab="valor")
# plot(main = names(series_temporais_setores)[7],series_temporais_setores[,7],ylab="valor")
# head(series_temporais_setores)
series_temporais_setores = cria_serie_retornos(series_temporais_setores)
#
# par(mfrow=c(3,3))
# plot(main = names(series_temporais_setores)[1],series_temporais_setores[,1],ylab="valor",type="l")
# plot(main = names(series_temporais_setores)[2],series_temporais_setores[,2],ylab="valor",type="l")
# plot(main = names(series_temporais_setores)[3],series_temporais_setores[,3],ylab="valor",type="l")
# plot(main = names(series_temporais_setores)[4],series_temporais_setores[,4],ylab="valor",type="l")
# plot(main = names(series_temporais_setores)[5],series_temporais_setores[,5],ylab="valor",type="l")
# plot(main = names(series_temporais_setores)[6],series_temporais_setores[,6],ylab="valor",type="l")
# plot(main = names(series_temporais_setores)[7],series_temporais_setores[,7],ylab="valor",type="l")
# serie_retornos_normalizado_por_setores = dado_semestre_retorna_media_serie_retornos_por_setor_sem_periodo(dados)
# write.table(x = series_temporais_setores,file="series_temporais_setores.csv",row.names=F)
dias_mes = 20
dias_ano = 240
total_dias = nrow(series_temporais_setores)
inicio_janelamento = seq(from=1,to=total_dias,by=dias_mes)
fim_janelamento = seq(from=1,to=total_dias,by=dias_mes)+dias_ano
# inicio_janelamento[fim_janelamento<total_dias]
# fim_janelamento[fim_janelamento<total_dias]
janelamentos_indices = data.frame(inicio = inicio_janelamento,fim = fim_janelamento)
janelamentos_indices = janelamentos_indices[janelamentos_indices$fim<=total_dias,]
# write.table(x = janelamentos_indices,file="janelamentos_indices.csv",row.names=F)
eixo_x_y = data.frame()
# setor = 1
j=1
grupo =1
colunas = c()
# i=1
for(i in 1:nrow(janelamentos_indices)){
#   serie_retornos_normalizado = dado_semestre_retorna_media_serie_retornos_por_setor(periodo,dados)
series_temporais = series_temporais_setores[janelamentos_indices$inicio[i]:janelamentos_indices$fim[i],]
#   dado_semestre_retorna_media_serie_retornos_por_setor_sem_periodo
#   plot(serie,type="l")
for(coluna in 1:length(names(series_temporais))){
#  coluna = 1
colunas[j] = names(series_temporais)[coluna]
serie = series_temporais[,coluna]
############ VaR = Value At Risk #############
#probabilidade de perda_anormal% de perdas anormais
z_1 = qnorm(.01)
z_5= qnorm(.05)
z_10 = qnorm(.1)
var_1 = mean(serie) + z_1 * sd(serie)
var_5 = mean(serie) + z_5 * sd(serie)
var_10 = mean(serie) + z_10 * sd(serie)
#         var_1 = mean(serie) - sqrt(var(serie))*qnorm(.99)
#         var_5 = mean(serie) - sqrt(var(serie))*qnorm(.95)
#         var_10 = mean(serie) - sqrt(var(serie))*qnorm(.9)
###########################################
#     z_99 = qnorm(.99)
#     z_95= qnorm(.95)
#     z_90 = qnorm(.9)
#
#     var_1 = mean(serie) - z_99 * sqrt(calcula_volatilidade(serie))
#     var_5 = mean(serie) - z_95 * sqrt(calcula_volatilidade(serie))
#     var_10 = mean(serie) - z_90 * sqrt(calcula_volatilidade(serie))
##################################3
#   var_1 = as.numeric(VaR(serie,p=.99,method = "gaussian"))
#    var_5 =  as.numeric(VaR(serie,p=.95,method="gaussian"))
#    var_10 =  as.numeric(VaR(serie,p=.9,method ="gaussian"))
##############################################
#     png(filename=paste(j,".png",sep=""),bg="transparent")
#     par(mfrow=c(2,1))
source("previsao_exponencial.R")
#     eixo_x_y = rbind(eixo_x_y, cbind(eixo_x_frequencias,alvo,previsao, sse,a,coeficiente_B,volatilidade,i))
#     colnames(eixo_x_y) = c("eixo_x_frequencias","alvo","previsao","sse","a","coeficiente_B","volatilidade","i")
#
###### OK #####
eixo_x_y = rbind(eixo_x_y, cbind(sse,a,coeficiente_B,volatilidade,grupo,var_1,var_5,var_10))
colnames(eixo_x_y) = c("sse","a","coeficiente_B","volatilidade","grupo","var_1","var_5","var_10")
###############
###### ADAPTACAO ######
#     eixo_x_y = rbind(eixo_x_y, cbind(eixo_x_frequencias,alvo,previsao,sse,a,coeficiente_B,volatilidade,i))
#     colnames(eixo_x_y) = c("eixo_x_frequencias","alvo","previsao","sse","a","coeficiente_B","volatilidade","i")
########################
#     a = 1
#     source("define_coeficiente_B_sem_a.R")
#     eixo_x_y_sem_a = rbind(eixo_x_y_sem_a, cbind(eixo_x_frequencias,alvo,previsao, sse,a,coeficiente_B,volatilidade,i))
#     #,periodo,setor,coeficiente_B*volatilidade))
#     colnames(eixo_x_y_sem_a) =  c("eixo_x_frequencias","alvo","previsao","sse","a","coeficiente_B","volatilidade","i")
#     dev.off()
j= j+1
# write.table(eixo_x_y,paste(names(series_temporais)[i],grupo_janelamento,"combinacao_janelamento_30_incrementos_0_01_0_28_todas_acoes.csv"),row.names=F,sep=",")
}
grupo = grupo + 1
}
eixo_x_y$setor = colunas[1:nrow(eixo_x_y)]
eixo_x_y$b_volatilidade = eixo_x_y$coeficiente_B*eixo_x_y$volatilidade
cor(data.frame(eixo_x_y$a,eixo_x_y$coeficiente_B,eixo_x_y$volatilidade,eixo_x_y$var_1,eixo_x_y$var_5,eixo_x_y$var_10))
200/205
205/200
5/200
cor.text(data.frame(eixo_x_y$a,eixo_x_y$coeficiente_B,eixo_x_y$volatilidade,eixo_x_y$var_1,eixo_x_y$var_5,eixo_x_y$var_10))
cor.test(data.frame(eixo_x_y$a,eixo_x_y$coeficiente_B,eixo_x_y$volatilidade,eixo_x_y$var_1,eixo_x_y$var_5,eixo_x_y$var_10))
resultado = data.frame(eixo_x_y$a,eixo_x_y$coeficiente_B,eixo_x_y$volatilidade,eixo_x_y$var_1,eixo_x_y$var_5,eixo_x_y$var_10)
View(janelamentos_indices)
View(resultado)
resultado = data.frame(eixo_x_y$coeficiente_B,eixo_x_y$var_5)
cor.test(resultado)
cor.test(resultado,method = "kendall")
cor.test(resultado$eixo_x_y.coeficiente_B,resultado$eixo_x_y.var_5,method = "kendall")
resultado = data.frame(eixo_x_y$a,eixo_x_y$coeficiente_B,eixo_x_y$volatilidade,eixo_x_y$var_1,eixo_x_y$var_5,eixo_x_y$var_10)
cor.test(resultado$eixo_x_y.coeficiente_B,resultado$eixo_x_y.var_5,method = "kendall")
cor.test(resultado$eixo_x_y.volatilidade,resultado$eixo_x_y.var_5,method = "kendall")
cor.test(resultado$eixo_x_y.coeficiente_B,resultado$eixo_x_y.var_5,method = "spearman")
cor.test(resultado$eixo_x_y.volatilidade,resultado$eixo_x_y.var_5,method = "spearman")
cor.test(resultado$eixo_x_y.volatilidade,resultado$eixo_x_y.var_5)
cor.test(resultado$eixo_x_y.volatilidade,resultado$eixo_x_y.var_5,alternative="greater")
cor.test(resultado$eixo_x_y.volatilidade,resultado$eixo_x_y.var_5,alternative="l")
cor.test(resultado$eixo_x_y.volatilidade,resultado$eixo_x_y.var_5,method = "spearman",alternative="greater")
cor.test(resultado$eixo_x_y.volatilidade,resultado$eixo_x_y.var_5,method = "spearman")
plot(resultado$eixo_x_y.coeficiente_B,resultado$eixo_x_y.var_5)
cor.test(resultado$eixo_x_y.coeficiente_B,resultado$eixo_x_y.var_5,method = "spearman")
plot(resultado$eixo_x_y.coeficiente_B,resultado$eixo_x_y.var_5)
plot(resultado$eixo_x_y.volatilidade,resultado$eixo_x_y.var_5)
plot(resultado$eixo_x_y.coeficiente_B,resultado$eixo_x_y.var_5)
cor.test(resultado$eixo_x_y.coeficiente_B,resultado$eixo_x_y.var_5,method = "spearman",conf.level = .95)
cor.test(resultado$eixo_x_y.coeficiente_B,resultado$eixo_x_y.var_5,method = "spearman",conf.level = .99)
cor.test(resultado$eixo_x_y.coeficiente_B,resultado$eixo_x_y.var_5,method = "spearman",conf.level = .9)
cor.test(resultado$eixo_x_y.coeficiente_B,resultado$eixo_x_y.var_5,method = "spearman")
cor(data.frame(eixo_x_y$a,eixo_x_y$coeficiente_B,eixo_x_y$volatilidade,eixo_x_y$var_1,eixo_x_y$var_5,eixo_x_y$var_10))
